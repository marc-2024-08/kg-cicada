version: "3.2"

services:
  rabbitmq:
    image: "rabbitmq:3-management-alpine"
    container_name: "rabbitmq"
    # environment:
    #   RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
    #   RABBITMQ_DEFAULT_USER: "rabbitmq"
    #   RABBITMQ_DEFAULT_PASS: "rabbitmq"
    #   RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
      # - "./enabled_plugins:/etc/rabbitmq/enabled_plugins"
      #- "./rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro"
      #- "./autocluster-0.4.1.ez:/usr/lib/rabbitmq/lib/rabbitmq_server-3.5.5/plugins/autocluster-0.4.1.ez"
    networks:
      - network

  # consumer:
  #   # If needed, Docker Compose will automatically run consumer/Dockerfile.
  #   build: consumer

  #   # Environment variables:
  #   environment:
  #     # The location of the RabbitMQ server.  "amqp" is the protocol;
  #     # "rabbitmq" is the hostname.  Note that there is not a guarantee
  #     # that the server will start first!  Telling the pika client library
  #     # to try multiple times gets around this ordering issue.
  #     AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'

  #   # Again, run on the private network.  Needed to see the "rabbitmq"
  #   # magic Docker DNS name.
  #   networks:
  #     - network

  # publisher:
  #   # Identical to the consumer.
  #   build: publisher
  #   environment:
  #     AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
  #   networks:
  #     - network

networks:
  # Declare our private network.  We must declare one for the magic
  # Docker DNS to work, but otherwise its default settings are fine.
  network:
    driver: bridge
